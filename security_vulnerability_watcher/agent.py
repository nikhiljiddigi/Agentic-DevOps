import os
import re
import json
import requests

OSV_API = "https://api.osv.dev/v1/query"

def parse_requirements(file_path):
    deps = []
    with open(file_path) as f:
        for line in f:
            line = line.strip()
            if not line or line.startswith("#"):
                continue
            if "==" in line:
                name, version = line.split("==", 1)
                deps.append((name.strip(), version.strip()))
    return deps

def fetch_cves(name, version):
    payload = {"package": {"name": name, "ecosystem": "PyPI"}, "version": version}
    try:
        r = requests.post(OSV_API, json=payload, timeout=8)
        if r.status_code == 200:
            vulns = r.json().get("vulns", [])
            results = []
            for v in vulns:
                desc = v.get("summary") or v.get("details") or "No description"
                sev = v.get("severity", [{}])[0].get("score", "N/A") if v.get("severity") else "N/A"
                results.append((v.get("id", "Unknown"), sev, desc))
            return results
    except Exception as e:
        print(f"⚠️  Failed CVE lookup for {name}: {e}")
    return []

def scan_code_for_secrets(file_path):
    patterns = [
        (r"AKIA[0-9A-Z]{16}", "AWS access key"),
        (r"(?i)token\s*=\s*['\"][A-Za-z0-9\-_\.]{8,}['\"]", "Token detected"),
        (r"(?i)password\s*=\s*['\"][^'\"]+['\"]", "Hardcoded password"),
        (r"Bearer\s+[A-Za-z0-9\-_\.]+", "Bearer token"),
    ]
    findings = []
    with open(file_path) as f:
        for i, line in enumerate(f, 1):
            for pat, msg in patterns:
                if re.search(pat, line):
                    findings.append(f"Line {i}: {msg}")
    return findings

def main():
    base = os.path.dirname(__file__)
    req_file = os.path.join(base, "requirements.txt")
    code_file = os.path.join(base, "sample_code.py")

    deps = parse_requirements(req_file)

    all_cves = {}
    for name, version in deps:
        vulns = fetch_cves(name, version)
        if vulns:
            all_cves[name] = vulns

    secrets = scan_code_for_secrets(code_file)

    print("\n✅ Security Scan Results:")

    # if not all_cves:
    #     print("\n📦 No dependency CVEs found.")
    # else:
    #     print("\n📦 Dependency Vulnerabilities:")
    #     for pkg, vulns in all_cves.items():
    #         print(f"  {pkg}:")
    #         for v in vulns:
    #             print(f"    - {v[0]} (Score {v[1]}) → {v[2]}")

    if not secrets:
        print("\n🔐 No hardcoded secrets found.")
    else:
        print("\n🔐 Hardcoded Secrets Detected:")
        for s in secrets:
            print(f"  - {s}")

    # Quick, human-readable summary
    if all_cves or secrets:
        print("\n🧠 Summary: Detected security issues in code or dependencies.")
        if all_cves:
            print("   - Known vulnerable dependency versions found.")
        if secrets:
            print("   - Hardcoded credentials present in source.")
        print("🩺 Fix:")
        if all_cves:
            print("   - Upgrade vulnerable packages (e.g., requests ≥ 2.20.0).")
        if secrets:
            print("   - Remove hardcoded tokens; use environment variables.")
    else:
        print("\n✅ Code and dependencies appear clean.")

if __name__ == "__main__":
    main()
